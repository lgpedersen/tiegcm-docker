diff --git a/tiegcm-linux.job b/tiegcm-linux.job
index 488a57f..937cd18 100755
--- a/tiegcm-linux.job
+++ b/tiegcm-linux.job
@@ -1,7 +1,7 @@
 #! /bin/csh
 #
 # Job script to build and execute the model on a 64-bit Linux desktop machine.
-# 
+#
 # User must set shell variables below:
 #
 #   modeldir:  Root directory to model source (may be an SVN working dir)
@@ -18,7 +18,7 @@
 #   utildir:   Directory containing supporting scripts (default $modeldir/scripts)
 #   runscript: LSF script with run commands (submitted with bsub from execdir)
 #
-# To switch to 2.5-deg resolution, set modelres below to 2.5, 
+# To switch to 2.5-deg resolution, set modelres below to 2.5,
 # and change execdir, tgcmdata and namelist input if necessary.
 #
 set modeldir = tiegcm2.0
@@ -27,13 +27,13 @@ set tgcmdata = tiegcm_res5.0_data
 set input    = tiegcm_res5.0.inp
 set output   = tiegcm_res5.0.out
 set modelres = 5.0
-set make     = Make.intel_hao64
+set make     = Make.gfort_hao64
 set mpi      = TRUE
-set nproc    = 4
+set nproc    = `nproc`
 set debug    = FALSE
 set exec     = TRUE
 set utildir  = $modeldir/scripts
-# 
+#
 #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 #                        Shell Script for TIEGCM Linux job
 #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@@ -42,7 +42,7 @@ set mycwd = `pwd`
 echo "" ; echo "${0}:"
 echo "  Begin execution at `date`"
 echo "  Current working directory: $mycwd"
-echo "  System: `uname -a`"  
+echo "  System: `uname -a`"
 echo ""
 #
 # Verify directories and make_machine file (make execdir if necessary).
@@ -60,7 +60,7 @@ if ($model == '') then
 endif
 
 if (! -d $utildir) then
-  echo ">>> Cannot find model scripts directory $utildir <<<" 
+  echo ">>> Cannot find model scripts directory $utildir <<<"
   exit 1
 endif
 
@@ -72,7 +72,7 @@ endif
 set srcdir = `perl $utildir/abspath $srcdir`
 
 if (! -d $execdir) then
-  echo "Making exec directory $execdir" 
+  echo "Making exec directory $execdir"
   mkdir -p $execdir
 endif
 #
@@ -146,7 +146,7 @@ echo "  Debug flag:        $debug"
 # and reset debug file:
 #
 if (-f $execdir/debug) then
-  set lastdebug = `cat $execdir/debug` 
+  set lastdebug = `cat $execdir/debug`
   if ($lastdebug != $debug) then
     echo "Clean execdir $execdir because debug flag switched from $lastdebug to $debug"
     set mycwd = `pwd` ; cd $execdir ; gmake clean ; cd $mycwd
@@ -157,7 +157,7 @@ else
   echo "Created file debug with debug flag = $debug"
 endif
 #
-# Copy defs header file to execdir, if necessary, according to 
+# Copy defs header file to execdir, if necessary, according to
 # requested resolution. This should seamlessly switch between
 # resolutions according to $modelres.
 #
@@ -170,7 +170,7 @@ if (-f $execdir/defs.h) then
     cp $defs $execdir/defs.h
   else
     echo "defs.h already set for model resolution $modelres"
-  endif 
+  endif
 else # defs.h does not exist in execdir -> copy appropriate defs file
   echo "Copying $defs to $execdir/defs.h for resolution $modelres"
   cp $defs $execdir/defs.h
@@ -186,7 +186,7 @@ echo "Begin building $model in `pwd`"
 #
 cat << EOF >! Make.env
 MAKE_MACHINE  = $make
-DIRS          = . $srcdir 
+DIRS          = . $srcdir
 MPI           = $mpi
 NPROC         = $nproc
 EXECNAME      = $model
@@ -211,7 +211,7 @@ endif
 echo Compiler: $compiler
 #
 # Build the model:
-gmake -j4 all || echo ">>> Error return from gmake all" && exit 1
+gmake -j`nproc` all || echo ">>> Error return from gmake all" && exit 1
 #
 # Execute Linux job (MPI or non-MPI run):
 #
diff --git a/tiegcm2.0/doc/userguide/quickstart.rst b/tiegcm2.0/doc/userguide/quickstart.rst
index d55fc24..4dca67c 100644
--- a/tiegcm2.0/doc/userguide/quickstart.rst
+++ b/tiegcm2.0/doc/userguide/quickstart.rst
@@ -150,6 +150,5 @@ The |ncarsuper| system uses the Load Sharing Facility (LSF) as a batch job manag
  * To calculate wallclock time for a 5-deg run with 16 cores, use .07 secs/timestep.
    For example, a 1-day simulation with a 60 sec timestep: ((24*3600) / 60 * .07) / 60 = 1.68 minutes
 
- * To calculate wallclock time for a 2.5-deg run with 64 cores, use .15 secs/timestep. 
+ * To calculate wallclock time for a 2.5-deg run with 64 cores, use .15 secs/timestep.
    For example, a 1-day simulation with a 30 sec timestep: ((24*3600) / 30 * .15) / 60 = 7.2 minutes
-     
diff --git a/tiegcm2.0/scripts/Make.gfort_hao64 b/tiegcm2.0/scripts/Make.gfort_hao64
index 53ab0e3..9dcfef6 100644
--- a/tiegcm2.0/scripts/Make.gfort_hao64
+++ b/tiegcm2.0/scripts/Make.gfort_hao64
@@ -3,8 +3,8 @@
 # Using GNU Fortran (GCC) 4.4.7 20120313 (Red Hat 4.4.7-16)
 #
 F90    = /usr/bin/gfortran
-MPIF90 = /usr/lib64/openmpi/bin/mpif90
-MPIRUN = /usr/lib64/openmpi/bin/mpirun
+MPIF90 = /usr/bin/mpif90
+MPIRUN = /usr/bin/mpirun
 FFLAGS = -fdefault-real-8
 FFLAGS += -fno-range-check # required for sub check_nans in util.F
 OPTIM   = -O3
@@ -25,13 +25,17 @@ DBGFLAGS   += -fbounds-check -fdump-core -fbacktrace
 #
 # These settings (netcdf 4.1.1) for netcdf work with gfortran:
 #
-LIB_NETCDF = /home/tgcm/intel/netcdf-4.1.1/lib
-INC_NETCDF = /home/tgcm/intel/netcdf-4.1.1/include
+#LIB_NETCDF = /home/tgcm/intel/netcdf-4.1.1/lib
+#INC_NETCDF = /home/tgcm/intel/netcdf-4.1.1/include
+#LIB_NETCDF = $(shell nc-config --flibs)
+LIB_NETCDF = $(shell nc-config --libdir)
+INC_NETCDF = $(shell nc-config --includedir)
 #
 # Makefile will include $(LIB_ESMF)/esmf.mk
 # This ESMF lib was built with gfortran/openmpi with /usr/lib64/openmpi/bin/mpif90
 #
-LIB_ESMF = /home/tgcm/esmf/gfort/esmf_6_3_0rp1/lib/libO/Linux.gfortran.64.openmpi.default
+#LIB_ESMF = /home/tgcm/esmf/gfort/esmf_6_3_0rp1/lib/libO/Linux.gfortran.64.openmpi.default
+LIB_ESMF = /usr/local/lib
 LIBS     = -lcurl
 #
 HOST     = $(shell hostname)
diff --git a/tiegcm2.0/scripts/Makefile b/tiegcm2.0/scripts/Makefile
index c5b4896..982094a 100644
--- a/tiegcm2.0/scripts/Makefile
+++ b/tiegcm2.0/scripts/Makefile
@@ -10,7 +10,7 @@
 #     INC_NETCDF: Include directory for netcdf
 #     LIB_NETCDF: Library directory for netcdf
 #   File Make.env contains additional information from the job script
-#     MAKE_MACHINE: File containing machine-specific compiler flags, etc          
+#     MAKE_MACHINE: File containing machine-specific compiler flags, etc
 #     DIRS:     List of source-code directories (in Make.env)
 #     MPI:      TRUE or FALSE
 #     EXECNAME: Name of executable to make
@@ -33,7 +33,7 @@ INC_DIRS  := $(foreach dir,$(DIRS),-I$(dir)) -I$(INC_NETCDF)
 SOURCES   := $(shell cat Srcfiles)
 OBJS      := $(addsuffix .o, $(basename $(SOURCES)))
 # LIBS may be specified in Make.machine file, so append here
-LIBS      += -L$(LIB_NETCDF) -lnetcdf 
+LIBS      += -lnetcdff
 COUPLING  := NO
 FC        := $(F90)
 
@@ -49,12 +49,11 @@ LDFLAGS  += $(ESMF_F90ESMFLINKLIBS)
 # so force it to use $(MPIF90), which is set by Make.gfort_hao64.
 #
 ifeq ($(F90),/usr/bin/gfortran)
-  ESMF_F90COMPILER = $(MPIF90)
-  @echo "set ESMF_F90COMPILER = $(ESMF_F90COMPILER)"
+ESMF_F90COMPILER = $(MPIF90)
 endif
 
 Depends::
-	@echo "OS           =$(OS)" 
+	@echo "OS           =$(OS)"
 	@echo "MAKE_MACHINE =$(MAKE_MACHINE)"
 	@echo "DIRS         =$(DIRS)"
 	@echo "INC_DIRS     =$(INC_DIRS)"
@@ -78,7 +77,7 @@ svn_revision.inc:
 nchist.F:  $(shell rm -f svn_revision.inc) svn_revision.inc
 
 $(EXECNAME): $(OBJS)
-	$(FC) -o $@ $(OBJS) $(LIBS) $(LDFLAGS)
+	$(FC) -o $@ $(OBJS) $(LIBS) $(LDFLAGS) -fdiagnostics-color
 
 CPPFLAGS := $(null)
 ifeq ($(MPI),TRUE)
@@ -105,6 +104,7 @@ ifeq ($(OS),AIX)
   CPPFLAGS := $(subst $(space),$(comma),$(CPPFLAGS))
 endif
 
+FFLAGS += -fallow-invalid-boz -std=legacy
 FFLAGS += $(INC_DIRS) $(OPTIM) $(DBGFLAGS)
 
 .SUFFIXES:
@@ -129,4 +129,3 @@ veryclean:
 	rm -f Depends Srcfiles *.o *.mod $(EXECNAME) Makefile Make.env $(MAKE_MACHINE) machines.ini mkdepends defs.h cwd fort*
 
 include Depends
-
diff --git a/tiegcm2.0/scripts/rmbinchars b/tiegcm2.0/scripts/rmbinchars
index 579b4a5..14231e4 100755
--- a/tiegcm2.0/scripts/rmbinchars
+++ b/tiegcm2.0/scripts/rmbinchars
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 import sys
 #
 # Remove non-ASCII characters in input file(s):
@@ -9,7 +9,7 @@ def strip_non_ascii(string):
     return ''.join(stripped)
 
 if len(sys.argv) == 1:
-  print '>>> Please provide input files from which to remove non-ASCII characters.'
+  print('>>> Please provide input files from which to remove non-ASCII characters.')
   sys.exit()
 
 for infile in sys.argv[1:]:
@@ -22,7 +22,7 @@ for infile in sys.argv[1:]:
 # Overwrite input file:
 #
   f = open(infile,'w')
-  print 'Overwriting file ',infile,' with non-ASCII characters removed.'
+  print('Overwriting file ',infile,' with non-ASCII characters removed.')
   for line in lines:
     newline = strip_non_ascii(line)
     f.write(newline+'\n')
